@@@ 인코딩 설정하기. web.xml에 추가해야함.
	<!-- @@@ filter setting -->
	<filter> 
	    <filter-name>encodingFilter</filter-name> 
	    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class> 
	    <init-param> 
	       <param-name>encoding</param-name> 
	       <param-value>UTF-8</param-value> 
	    </init-param> 
	    <init-param> 
	       <param-name>forceEncoding</param-name> 
	       <param-value>true</param-value> 
	    </init-param> 
 	</filter> 
	 <filter-mapping> 
	    <filter-name>encodingFilter</filter-name> 
	    <url-pattern>/*</url-pattern> 
	 </filter-mapping> 
	 
	 Spring Web Project - POST 방식에서의 한글 깨짐 해결 방법
	역할
	- 브라우저 —> 요청정보 Body 데이터 —UTF8 인코딩—> Java 단에서의 데이터 처리
	- CharacterEncodingFilter
	- HTTP상에서 주고 받는 데이터의 헤더값을 UTF-8로 인코딩
	- Servlet에서의 request.setCharacterEncoding("utf-8");
	- POST로 인코딩 데이터를 받는 Servlet에서의 request.setCharacterEncoding("utf-8"); 처리와 동일한 기능을 수행한다.
		즉, 이 Filter를 설정하면 POST 요청을 보내는(Submit) 모든 Controller(Servlet) 마다 request.setCharacterEncoding("utf-8"); 내용을 추가하지 않아도 된다.
		또한 DB에서 불러올 한글 데이터들의 한글 깨짐 현상을 해결한다.
	사용
	- 해당 filter를 매핑할 때 모든 URL에 대해 인코딩될 수 있도록 /*와 같이 url-pattern을 설정한다.
	- 주의!) Spring Security 설정이 있는 경우,
	- 한글 필터 설정이 springSecurityFilterChain 앞에 위치해야 한다.
	
@@@ VO작성
	- getter setter작성
	- DB와 필드 변수 이름을 같게 해야 함.
	
@@@ DB설정
	- mvn에서 spring jdbc
	<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-jdbc</artifactId>
	    <version>5.2.2.RELEASE</version>
	</dependency>
		  	
	https://offbyone.tistory.com/18 여기에 나와있음 
	
@@@ Setting.
	- Spring jdbc (maven) 버전 관리시에 스프링과 이름 같은 것 주의. 
	- Ojdbc6: Below jdk 1.8version / Ojdbc5,14g: under 1.7version / 12c : below 1.9
		오라클 jdbc는 저작권 문제로 인해서 레파지토리를 따로 지정해줘야 한다.
		https://search.maven.org/artifact/org.zenframework.z8.dependencies.commons/ojdbc6/2.0/pom
		Or MVN
	- Apache Commons DBCP (DataBaseConnectionPool의 약자)
	- 프로젝트 -> 프로퍼티에서 facets, compiler, build path 셋 다 버전 확인
	- 다 설정 후 프로젝트 우 클릭 후 메이븐 -> 업데이트
	- 서블릿을 변경하면 web.xml의 DTD부분도 수정해주어야 한다. 
	
@@@ pom.xml
	<repositories>
	  <repository>
	   <id>oracle</id>
	   <url>http://maven.jahia.org/maven2</url>
	  </repository>
	</repositories>

	<!-- SPRING CONTEXT -->
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-context</artifactId>
	    <version>${org.springframework-version}</version>
	</dependency>
	<!-- SLF4J -->
	<dependency>
	    <groupId>org.slf4j</groupId>
	    <artifactId>slf4j-api</artifactId>
	    <version>${org.slf4j-version}</version>
	</dependency>	
	<!-- LOGBACK -->
	<dependency>
	    <groupId>ch.qos.logback</groupId>
	    <artifactId>logback-classic</artifactId>
	    <version>${ch.qos.logback-version}</version>
	    <scope>runtime</scope>
	</dependency>	
	<!-- ASPECT J -->
	<dependency>
	    <groupId>org.aspectj</groupId>
	    <artifactId>aspectjweaver</artifactId>
	    <version>${org.aspectj-version}</version>
	</dependency>	
	<!-- JAVAX ANNOTATION -->
	<dependency>
	    <groupId>javax.annotation</groupId>
	    <artifactId>javax.annotation-api</artifactId>
	    <version>${javax.annotation-version}</version>
	</dependency>
	<!-- SPRING JDBC-->
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-jdbc</artifactId>
	    <version>5.2.3.RELEASE</version>
	</dependency>
	<!-- ORACLE JDBC6 -->
	<dependency>
	    <groupId>com.oracle</groupId>
	    <artifactId>ojdbc6</artifactId>
	    <version>12.1.0.2</version>
	</dependency>		
	<!-- DPCP -->
	<dependency>
	    <groupId>org.apache.commons</groupId>
	    <artifactId>commons-dbcp2</artifactId>
	    <version>2.1.1</version>
	</dependency>			
		
@@@ @Component
	- Bean Configuration 파일에 Bean을 등록하지 않아도 자동으로 등록이 되도록 할 때 사용한다.
	- @component 개발자가 클래스의 코드를 수정 할 수 있는 경우에 사용한다.
	- @Bean: 개발자가 클래스의 코드를 수정할 수 없는 경우에 사용한다.
		같은 클래스 타입의 Bean을 여러 개 등록하는 경우에 이용한다.
	- xml을 이용하는 방식 혹은 Bean configuration class파일을 만드는 방식.
	
			beans b1 = context.getBean(beans.class);
		System.out.println("@ b1 Address:" + b1);
		//beans로 객체 하나를 더 생성해도 주소값이 같게 나옴. 컴포넌트의 기본이 싱글톤이기 때문에
		//이름만 다른 객체지 같은 번지의 주소를 공유하게 되는 현상이 일어남.		
		
		
		/*
 @Component
 
  - Bean Configuration 파일에 Bean을 등록하지 않아도 자동으로 등록이 됩니다.
  
  - @component : 개발자가 클래스의 코드를 수정 할 수 있는 경우에 사용

    @Component
     public class TestBean1 {
     
     
     }
     
    @Component("이름")
     public class TestBean2 {
     
     
     } 
     
     
     @Component
     @Lazy   //getBean 메소드를 호출할 때 객체가 생성됩니다.
     public class TestBean3 {
     
     
     }
     
     @Component
     @Scope("prototype")   //여러개의 객체가 생성됩니다.
     public class TestBean4 {
     
     
     }
     

    @Bean : 개발자가 클래스의 코드를 수정 할 수 없는 경우와
       같은 클래스 타입의 Bean을 여러개 등록하는 경우에 이용합니다
       
  - xml을 이용하는 방식
    <context:component-scan base-package='kr.co.hankuk.beans'/>
    <context:component-scan base-package='kr.co.hankuk.beans2'/>
  
  - Bean Configuration 파일
    @ComponentScan(basePackages='kr.co.hankuk.beans', 
                   "base-package='kr.co.hankuk.beans2"})
    1)같은 클래스를 공유하는 서로 다른 객체는 주소가 서로 다르다.
    2)서로 다른 클래스의 다른 객체는 주소가 서로 다르다.
    3)서로 다른 크래스가 하나의 객체를 공유하면 위배
      (메오리 고유상의 위배조건에 의하여)하여 오류 발생
      단, 각 클래스가 상속관게에 있을 경우에는 예외적으로 허용.
      
     @PostConstruct : 생성자 호출후에 자동으로 호출되는 메소드
     public void init() {
     
      }
      
      
     @PreDestory : 객체소멸전에 자동으로 호출되는 메소드
     public void destory() {
     
     }

*/		
	
	
	