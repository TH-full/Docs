@@@ AOP
	- Aspect Oreinted Programming
	- 관점 지향, 관심사 지향 프로그래밍.
	- 하나의 프로그램을 관점이라는 논리적인 단위로 분리하여 관리하려는 개념.
	- 주로 많이 사용되는 부분이 로깅, 선언적 트랜잭션, 보안, 캐싱 처리 등.
	- joint point: 모듈이 삽입되어 동작하게 되는 특정 위치.
	- point cut: 다양한 joint point중에서 어떤 것을 사용할지 선택해야 한다.
		EX.) 예를 들어 현금관리에서 인출이 먼저냐 예금이 먼저냐 등.
	- advice: joint point에 삽입되어서 동작할 수 있는 코드: 프로그램 로직.
		before
		after-returning
		after-throwing
		after
		around
	- weaving: advice를 핵심 로직 코드에 적용하는 것: 컴파일/실행.
	- Aspect: point cut + advice
	
	- 구현
		@AspectJ 어노테이션을 이용하는 법.
		XML을 이용한 구현 방법
	- 라이브러리를 추가해서 사용해야 한다.
		메이븐 레퍼지토리에서 aspectj weaver 검색
		<!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver -->
		<dependency>
		    <groupId>org.aspectj</groupId>
		    <artifactId>aspectjweaver</artifactId>
		    <version>1.9.2</version>
		</dependency>
		
		javax annotation api
		<!-- https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api -->
		<dependency>
		    <groupId>javax.annotation</groupId>
		    <artifactId>javax.annotation-api</artifactId>
		    <version>1.3.2</version>
		</dependency>
		
	-beans.xml을 만들 때 AOP를 체크해야 한다.	
		
	-Advice 종류 
  		1)before : 메소드 호출 전에 동작하는 Advice
	  	2)after-returning : 예외 없이 호출된 메소드의 동작이 완료되면 동작하는 Advice
  		3)after-throwing : 호출된 메소드 동작 중 예외가 발생하였을 때 동작하는 Advice
  		4)after : 예외 발생 여부에 관계없이 호출된 메소드의 동작이 완료되면 동작하는 Advice
  		5)around : 메소드 호출 전과 후에 동작하는 Advice	
		
		
@@@ execution
	- 이에 대한 옵션들이 많음. AOP beans옵션.
	- 이 설명 부터는 naming을 2로 지정함.
	
	모든 타입을 처리할 수 있도록 weaving 하시오.
	- 메소드를 따로 만들 필요 없이 xml파일에서 와일드 카드를 통해서 처리할 수 있다.
	- <aop:pointcut expression="execution(int com.taehwan.beans.TestBean2.method1(*))" id="point1"/>
	- 앞의 자료형은 상관없이 와일드 카드만 적어주면 된다고 하심(찾아보기).

		
	
@@@ SPRING API 문서
	- https://docs.spring.io/spring/docs/3.1.x/javadoc-api/
	
	
	
@@@ Git Repository에 Push한 이후에는 이클립스를 껐다 켜야함.
왜인지는 모르겠으나, 기본 클래스를 찾을 수 없다고 나옴.



@@@ AspectJ (MainClass3, TestBean3, AdvisorClass3)
	@AspectJ 어노테이션을 이용하여 Advisor역할을 할 Bean을 생성할 수 있다.

	- xml: <aop:aspectj-autoproxy/>
	- java: @EnableAspectAutoProxy
	
스프링은 동적 프록시를 기반으로 AOP를 구현하므로 메소드 조인 포인트만 지원함.
즉, 핵심기능(타겟)의 메소드가 호출되는 런타임 시점에만 부각기능을 적용.
그러나 AspectJ와 같은 고급 AOP프레임워크를 사용하면 객체의 생성, 필드의 값의 조작,조회
static메소드 호출 및 초기화 드으이 다양한 형태의 작업에 부가 기능을 적용할 수 있음.
	










